
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACONSEN COMMA COMP COMPF CONSEN COUNT CTABLE DCONSEN DRAW DTYPE EQUALS GCCON HAMDIS ID INT LPAR MOTIF ORF PRINT PROTINFER PUNNETT RCOMP RCOMPF READ RECUR RNAINF RPAR RTRANSC RTRANSCF RTYPE SEQ STRING TRANSC TRANSCF TRANSL VARLIST WPUNNETT WRITEstatement : VARLIST statement : ID EQUALS ID\n                    | ID EQUALS result\n                    statement : ID\n                   statement : result\n                   result : method_one\n                | method_two\n                | method_three\n                method_one : PRINT LPAR ID RPAR\n                    | COMP LPAR ID RPAR\n                    | RCOMP LPAR ID RPAR\n                    | TRANSC LPAR ID RPAR\n                    | RTRANSC LPAR ID RPAR\n                    | CTABLE LPAR INT RPAR\n                    | COUNT LPAR ID RPAR\n                    | CONSEN LPAR ID RPAR\n                    | ACONSEN LPAR ID RPAR\n                    | DCONSEN LPAR ID RPAR\n                    | TRANSL LPAR ID RPAR\n                    | READ LPAR STRING COMMA STRING RPAR\n                    | WRITE LPAR ID RPAR\n                    | GCCON LPAR STRING RPAR\n                    | RNAINF LPAR ID RPAR\n                    | ORF LPAR STRING RPAR\n                    | COMPF LPAR ID RPAR\n                    | RCOMPF LPAR ID RPAR\n                    | TRANSCF LPAR ID RPAR\n                    | RTRANSCF LPAR ID RPAR\n                    | MOTIF LPAR ID COMMA STRING RPAR\n                    | PUNNETT LPAR STRING COMMA STRING RPAR\n                    | WPUNNETT LPAR STRING COMMA STRING COMMA STRING RPAR\n                    | PROTINFER LPAR STRING RPAR\n                method_two : SEQ LPAR STRING COMMA DTYPE RPAR\n                    | SEQ LPAR STRING COMMA RTYPE RPAR\n                    | HAMDIS LPAR ID COMMA ID RPAR\n                    | RECUR LPAR INT COMMA INT RPAR\n                    method_three : DRAW LPAR INT COMMA STRING RPAR\n                    '
    
_lr_action_items = {'VARLIST':([0,],[2,]),'ID':([0,36,37,38,39,40,41,43,44,45,46,47,49,51,53,54,55,56,57,62,120,],[3,65,67,68,69,70,71,73,74,75,76,77,79,81,83,84,85,86,87,92,129,]),'PRINT':([0,36,],[8,8,]),'COMP':([0,36,],[9,9,]),'RCOMP':([0,36,],[10,10,]),'TRANSC':([0,36,],[11,11,]),'RTRANSC':([0,36,],[12,12,]),'CTABLE':([0,36,],[13,13,]),'COUNT':([0,36,],[14,14,]),'CONSEN':([0,36,],[15,15,]),'ACONSEN':([0,36,],[16,16,]),'DCONSEN':([0,36,],[17,17,]),'TRANSL':([0,36,],[18,18,]),'READ':([0,36,],[19,19,]),'WRITE':([0,36,],[20,20,]),'GCCON':([0,36,],[21,21,]),'RNAINF':([0,36,],[22,22,]),'ORF':([0,36,],[23,23,]),'COMPF':([0,36,],[24,24,]),'RCOMPF':([0,36,],[25,25,]),'TRANSCF':([0,36,],[26,26,]),'RTRANSCF':([0,36,],[27,27,]),'MOTIF':([0,36,],[28,28,]),'PUNNETT':([0,36,],[29,29,]),'WPUNNETT':([0,36,],[30,30,]),'PROTINFER':([0,36,],[31,31,]),'SEQ':([0,36,],[32,32,]),'HAMDIS':([0,36,],[33,33,]),'RECUR':([0,36,],[34,34,]),'DRAW':([0,36,],[35,35,]),'$end':([1,2,3,4,5,6,7,65,66,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,112,113,114,118,132,133,134,136,137,138,139,140,142,],[0,-1,-4,-5,-6,-7,-8,-2,-3,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-32,-20,-29,-30,-33,-34,-35,-36,-37,-31,]),'EQUALS':([3,],[36,]),'LPAR':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,],[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,]),'INT':([42,63,64,121,],[72,93,94,130,]),'STRING':([48,50,52,58,59,60,61,106,115,116,117,122,135,],[78,80,82,88,89,90,91,123,124,125,126,131,141,]),'RPAR':([67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,84,85,86,90,123,124,125,127,128,129,130,131,141,],[95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,112,113,114,118,132,133,134,136,137,138,139,140,142,]),'COMMA':([78,87,88,89,91,92,93,94,126,],[106,115,116,117,119,120,121,122,135,]),'DTYPE':([119,],[127,]),'RTYPE':([119,],[128,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'result':([0,36,],[4,66,]),'method_one':([0,36,],[5,5,]),'method_two':([0,36,],[6,6,]),'method_three':([0,36,],[7,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> VARLIST','statement',1,'p_print_varlist','biolpp_parser.py',16),
  ('statement -> ID EQUALS ID','statement',3,'p_assignment','biolpp_parser.py',24),
  ('statement -> ID EQUALS result','statement',3,'p_assignment','biolpp_parser.py',25),
  ('statement -> ID','statement',1,'p_statement_id','biolpp_parser.py',33),
  ('statement -> result','statement',1,'p_statement_result','biolpp_parser.py',41),
  ('result -> method_one','result',1,'p_result','biolpp_parser.py',49),
  ('result -> method_two','result',1,'p_result','biolpp_parser.py',50),
  ('result -> method_three','result',1,'p_result','biolpp_parser.py',51),
  ('method_one -> PRINT LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',62),
  ('method_one -> COMP LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',63),
  ('method_one -> RCOMP LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',64),
  ('method_one -> TRANSC LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',65),
  ('method_one -> RTRANSC LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',66),
  ('method_one -> CTABLE LPAR INT RPAR','method_one',4,'p_method_one','biolpp_parser.py',67),
  ('method_one -> COUNT LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',68),
  ('method_one -> CONSEN LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',69),
  ('method_one -> ACONSEN LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',70),
  ('method_one -> DCONSEN LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',71),
  ('method_one -> TRANSL LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',72),
  ('method_one -> READ LPAR STRING COMMA STRING RPAR','method_one',6,'p_method_one','biolpp_parser.py',73),
  ('method_one -> WRITE LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',74),
  ('method_one -> GCCON LPAR STRING RPAR','method_one',4,'p_method_one','biolpp_parser.py',75),
  ('method_one -> RNAINF LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',76),
  ('method_one -> ORF LPAR STRING RPAR','method_one',4,'p_method_one','biolpp_parser.py',77),
  ('method_one -> COMPF LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',78),
  ('method_one -> RCOMPF LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',79),
  ('method_one -> TRANSCF LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',80),
  ('method_one -> RTRANSCF LPAR ID RPAR','method_one',4,'p_method_one','biolpp_parser.py',81),
  ('method_one -> MOTIF LPAR ID COMMA STRING RPAR','method_one',6,'p_method_one','biolpp_parser.py',82),
  ('method_one -> PUNNETT LPAR STRING COMMA STRING RPAR','method_one',6,'p_method_one','biolpp_parser.py',83),
  ('method_one -> WPUNNETT LPAR STRING COMMA STRING COMMA STRING RPAR','method_one',8,'p_method_one','biolpp_parser.py',84),
  ('method_one -> PROTINFER LPAR STRING RPAR','method_one',4,'p_method_one','biolpp_parser.py',85),
  ('method_two -> SEQ LPAR STRING COMMA DTYPE RPAR','method_two',6,'p_method_two','biolpp_parser.py',134),
  ('method_two -> SEQ LPAR STRING COMMA RTYPE RPAR','method_two',6,'p_method_two','biolpp_parser.py',135),
  ('method_two -> HAMDIS LPAR ID COMMA ID RPAR','method_two',6,'p_method_two','biolpp_parser.py',136),
  ('method_two -> RECUR LPAR INT COMMA INT RPAR','method_two',6,'p_method_two','biolpp_parser.py',137),
  ('method_three -> DRAW LPAR INT COMMA STRING RPAR','method_three',6,'p_method_three','biolpp_parser.py',148),
]
