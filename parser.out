Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    PTYPE
    STYPE
    TTYPE
    VOID

Grammar

Rule 0     S' -> statement
Rule 1     statement -> VARLIST
Rule 2     statement -> ID EQUALS ID
Rule 3     statement -> ID EQUALS result
Rule 4     statement -> ID
Rule 5     statement -> result
Rule 6     result -> method_one
Rule 7     result -> method_two
Rule 8     result -> method_three
Rule 9     method_one -> PRINT LPAR ID RPAR
Rule 10    method_one -> COMP LPAR ID RPAR
Rule 11    method_one -> RCOMP LPAR ID RPAR
Rule 12    method_one -> TRANSC LPAR ID RPAR
Rule 13    method_one -> RTRANSC LPAR ID RPAR
Rule 14    method_one -> CTABLE LPAR INT RPAR
Rule 15    method_one -> COUNT LPAR ID RPAR
Rule 16    method_one -> CONSEN LPAR ID RPAR
Rule 17    method_one -> ACONSEN LPAR ID RPAR
Rule 18    method_one -> DCONSEN LPAR ID RPAR
Rule 19    method_one -> CMOTIF LPAR list RPAR
Rule 20    method_one -> TRANSL LPAR ID RPAR
Rule 21    method_one -> READ LPAR STRING RPAR
Rule 22    method_two -> SEQ LPAR STRING COMMA DTYPE RPAR
Rule 23    method_two -> SEQ LPAR STRING COMMA RTYPE RPAR
Rule 24    method_three -> DRAW LPAR INT COMMA ID COMMA STRING RPAR
Rule 25    method_three -> WRITE LPAR FFORMAT COMMA ID COMMA STRING RPAR
Rule 26    method_three -> WRITE LPAR TFORMAT COMMA ID COMMA STRING RPAR
Rule 27    list -> list COMMA list
Rule 28    list -> ID

Terminals, with rules where they appear

ACONSEN              : 17
CMOTIF               : 19
COMMA                : 22 23 24 24 25 25 26 26 27
COMP                 : 10
CONSEN               : 16
COUNT                : 15
CTABLE               : 14
DCONSEN              : 18
DOT                  : 
DRAW                 : 24
DTYPE                : 22
EQUALS               : 2 3
FFORMAT              : 25
ID                   : 2 2 3 4 9 10 11 12 13 15 16 17 18 20 24 25 26 28
INT                  : 14 24
LPAR                 : 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
PRINT                : 9
PTYPE                : 
RCOMP                : 11
READ                 : 21
RPAR                 : 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
RTRANSC              : 13
RTYPE                : 23
SEQ                  : 22 23
STRING               : 21 22 23 24 25 26
STYPE                : 
TFORMAT              : 26
TRANSC               : 12
TRANSL               : 20
TTYPE                : 
VARLIST              : 1
VOID                 : 
WRITE                : 25 26
error                : 

Nonterminals, with rules where they appear

list                 : 19 27 27
method_one           : 6
method_three         : 8
method_two           : 7
result               : 3 5
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . VARLIST
    (2) statement -> . ID EQUALS ID
    (3) statement -> . ID EQUALS result
    (4) statement -> . ID
    (5) statement -> . result
    (6) result -> . method_one
    (7) result -> . method_two
    (8) result -> . method_three
    (9) method_one -> . PRINT LPAR ID RPAR
    (10) method_one -> . COMP LPAR ID RPAR
    (11) method_one -> . RCOMP LPAR ID RPAR
    (12) method_one -> . TRANSC LPAR ID RPAR
    (13) method_one -> . RTRANSC LPAR ID RPAR
    (14) method_one -> . CTABLE LPAR INT RPAR
    (15) method_one -> . COUNT LPAR ID RPAR
    (16) method_one -> . CONSEN LPAR ID RPAR
    (17) method_one -> . ACONSEN LPAR ID RPAR
    (18) method_one -> . DCONSEN LPAR ID RPAR
    (19) method_one -> . CMOTIF LPAR list RPAR
    (20) method_one -> . TRANSL LPAR ID RPAR
    (21) method_one -> . READ LPAR STRING RPAR
    (22) method_two -> . SEQ LPAR STRING COMMA DTYPE RPAR
    (23) method_two -> . SEQ LPAR STRING COMMA RTYPE RPAR
    (24) method_three -> . DRAW LPAR INT COMMA ID COMMA STRING RPAR
    (25) method_three -> . WRITE LPAR FFORMAT COMMA ID COMMA STRING RPAR
    (26) method_three -> . WRITE LPAR TFORMAT COMMA ID COMMA STRING RPAR

    VARLIST         shift and go to state 2
    ID              shift and go to state 3
    PRINT           shift and go to state 8
    COMP            shift and go to state 9
    RCOMP           shift and go to state 10
    TRANSC          shift and go to state 11
    RTRANSC         shift and go to state 12
    CTABLE          shift and go to state 13
    COUNT           shift and go to state 14
    CONSEN          shift and go to state 15
    ACONSEN         shift and go to state 16
    DCONSEN         shift and go to state 17
    CMOTIF          shift and go to state 18
    TRANSL          shift and go to state 19
    READ            shift and go to state 20
    SEQ             shift and go to state 21
    DRAW            shift and go to state 22
    WRITE           shift and go to state 23

    statement                      shift and go to state 1
    result                         shift and go to state 4
    method_one                     shift and go to state 5
    method_two                     shift and go to state 6
    method_three                   shift and go to state 7

state 1

    (0) S' -> statement .



state 2

    (1) statement -> VARLIST .

    $end            reduce using rule 1 (statement -> VARLIST .)


state 3

    (2) statement -> ID . EQUALS ID
    (3) statement -> ID . EQUALS result
    (4) statement -> ID .

    EQUALS          shift and go to state 24
    $end            reduce using rule 4 (statement -> ID .)


state 4

    (5) statement -> result .

    $end            reduce using rule 5 (statement -> result .)


state 5

    (6) result -> method_one .

    $end            reduce using rule 6 (result -> method_one .)


state 6

    (7) result -> method_two .

    $end            reduce using rule 7 (result -> method_two .)


state 7

    (8) result -> method_three .

    $end            reduce using rule 8 (result -> method_three .)


state 8

    (9) method_one -> PRINT . LPAR ID RPAR

    LPAR            shift and go to state 25


state 9

    (10) method_one -> COMP . LPAR ID RPAR

    LPAR            shift and go to state 26


state 10

    (11) method_one -> RCOMP . LPAR ID RPAR

    LPAR            shift and go to state 27


state 11

    (12) method_one -> TRANSC . LPAR ID RPAR

    LPAR            shift and go to state 28


state 12

    (13) method_one -> RTRANSC . LPAR ID RPAR

    LPAR            shift and go to state 29


state 13

    (14) method_one -> CTABLE . LPAR INT RPAR

    LPAR            shift and go to state 30


state 14

    (15) method_one -> COUNT . LPAR ID RPAR

    LPAR            shift and go to state 31


state 15

    (16) method_one -> CONSEN . LPAR ID RPAR

    LPAR            shift and go to state 32


state 16

    (17) method_one -> ACONSEN . LPAR ID RPAR

    LPAR            shift and go to state 33


state 17

    (18) method_one -> DCONSEN . LPAR ID RPAR

    LPAR            shift and go to state 34


state 18

    (19) method_one -> CMOTIF . LPAR list RPAR

    LPAR            shift and go to state 35


state 19

    (20) method_one -> TRANSL . LPAR ID RPAR

    LPAR            shift and go to state 36


state 20

    (21) method_one -> READ . LPAR STRING RPAR

    LPAR            shift and go to state 37


state 21

    (22) method_two -> SEQ . LPAR STRING COMMA DTYPE RPAR
    (23) method_two -> SEQ . LPAR STRING COMMA RTYPE RPAR

    LPAR            shift and go to state 38


state 22

    (24) method_three -> DRAW . LPAR INT COMMA ID COMMA STRING RPAR

    LPAR            shift and go to state 39


state 23

    (25) method_three -> WRITE . LPAR FFORMAT COMMA ID COMMA STRING RPAR
    (26) method_three -> WRITE . LPAR TFORMAT COMMA ID COMMA STRING RPAR

    LPAR            shift and go to state 40


state 24

    (2) statement -> ID EQUALS . ID
    (3) statement -> ID EQUALS . result
    (6) result -> . method_one
    (7) result -> . method_two
    (8) result -> . method_three
    (9) method_one -> . PRINT LPAR ID RPAR
    (10) method_one -> . COMP LPAR ID RPAR
    (11) method_one -> . RCOMP LPAR ID RPAR
    (12) method_one -> . TRANSC LPAR ID RPAR
    (13) method_one -> . RTRANSC LPAR ID RPAR
    (14) method_one -> . CTABLE LPAR INT RPAR
    (15) method_one -> . COUNT LPAR ID RPAR
    (16) method_one -> . CONSEN LPAR ID RPAR
    (17) method_one -> . ACONSEN LPAR ID RPAR
    (18) method_one -> . DCONSEN LPAR ID RPAR
    (19) method_one -> . CMOTIF LPAR list RPAR
    (20) method_one -> . TRANSL LPAR ID RPAR
    (21) method_one -> . READ LPAR STRING RPAR
    (22) method_two -> . SEQ LPAR STRING COMMA DTYPE RPAR
    (23) method_two -> . SEQ LPAR STRING COMMA RTYPE RPAR
    (24) method_three -> . DRAW LPAR INT COMMA ID COMMA STRING RPAR
    (25) method_three -> . WRITE LPAR FFORMAT COMMA ID COMMA STRING RPAR
    (26) method_three -> . WRITE LPAR TFORMAT COMMA ID COMMA STRING RPAR

    ID              shift and go to state 41
    PRINT           shift and go to state 8
    COMP            shift and go to state 9
    RCOMP           shift and go to state 10
    TRANSC          shift and go to state 11
    RTRANSC         shift and go to state 12
    CTABLE          shift and go to state 13
    COUNT           shift and go to state 14
    CONSEN          shift and go to state 15
    ACONSEN         shift and go to state 16
    DCONSEN         shift and go to state 17
    CMOTIF          shift and go to state 18
    TRANSL          shift and go to state 19
    READ            shift and go to state 20
    SEQ             shift and go to state 21
    DRAW            shift and go to state 22
    WRITE           shift and go to state 23

    result                         shift and go to state 42
    method_one                     shift and go to state 5
    method_two                     shift and go to state 6
    method_three                   shift and go to state 7

state 25

    (9) method_one -> PRINT LPAR . ID RPAR

    ID              shift and go to state 43


state 26

    (10) method_one -> COMP LPAR . ID RPAR

    ID              shift and go to state 44


state 27

    (11) method_one -> RCOMP LPAR . ID RPAR

    ID              shift and go to state 45


state 28

    (12) method_one -> TRANSC LPAR . ID RPAR

    ID              shift and go to state 46


state 29

    (13) method_one -> RTRANSC LPAR . ID RPAR

    ID              shift and go to state 47


state 30

    (14) method_one -> CTABLE LPAR . INT RPAR

    INT             shift and go to state 48


state 31

    (15) method_one -> COUNT LPAR . ID RPAR

    ID              shift and go to state 49


state 32

    (16) method_one -> CONSEN LPAR . ID RPAR

    ID              shift and go to state 50


state 33

    (17) method_one -> ACONSEN LPAR . ID RPAR

    ID              shift and go to state 51


state 34

    (18) method_one -> DCONSEN LPAR . ID RPAR

    ID              shift and go to state 52


state 35

    (19) method_one -> CMOTIF LPAR . list RPAR
    (27) list -> . list COMMA list
    (28) list -> . ID

    ID              shift and go to state 54

    list                           shift and go to state 53

state 36

    (20) method_one -> TRANSL LPAR . ID RPAR

    ID              shift and go to state 55


state 37

    (21) method_one -> READ LPAR . STRING RPAR

    STRING          shift and go to state 56


state 38

    (22) method_two -> SEQ LPAR . STRING COMMA DTYPE RPAR
    (23) method_two -> SEQ LPAR . STRING COMMA RTYPE RPAR

    STRING          shift and go to state 57


state 39

    (24) method_three -> DRAW LPAR . INT COMMA ID COMMA STRING RPAR

    INT             shift and go to state 58


state 40

    (25) method_three -> WRITE LPAR . FFORMAT COMMA ID COMMA STRING RPAR
    (26) method_three -> WRITE LPAR . TFORMAT COMMA ID COMMA STRING RPAR

    FFORMAT         shift and go to state 59
    TFORMAT         shift and go to state 60


state 41

    (2) statement -> ID EQUALS ID .

    $end            reduce using rule 2 (statement -> ID EQUALS ID .)


state 42

    (3) statement -> ID EQUALS result .

    $end            reduce using rule 3 (statement -> ID EQUALS result .)


state 43

    (9) method_one -> PRINT LPAR ID . RPAR

    RPAR            shift and go to state 61


state 44

    (10) method_one -> COMP LPAR ID . RPAR

    RPAR            shift and go to state 62


state 45

    (11) method_one -> RCOMP LPAR ID . RPAR

    RPAR            shift and go to state 63


state 46

    (12) method_one -> TRANSC LPAR ID . RPAR

    RPAR            shift and go to state 64


state 47

    (13) method_one -> RTRANSC LPAR ID . RPAR

    RPAR            shift and go to state 65


state 48

    (14) method_one -> CTABLE LPAR INT . RPAR

    RPAR            shift and go to state 66


state 49

    (15) method_one -> COUNT LPAR ID . RPAR

    RPAR            shift and go to state 67


state 50

    (16) method_one -> CONSEN LPAR ID . RPAR

    RPAR            shift and go to state 68


state 51

    (17) method_one -> ACONSEN LPAR ID . RPAR

    RPAR            shift and go to state 69


state 52

    (18) method_one -> DCONSEN LPAR ID . RPAR

    RPAR            shift and go to state 70


state 53

    (19) method_one -> CMOTIF LPAR list . RPAR
    (27) list -> list . COMMA list

    RPAR            shift and go to state 71
    COMMA           shift and go to state 72


state 54

    (28) list -> ID .

    RPAR            reduce using rule 28 (list -> ID .)
    COMMA           reduce using rule 28 (list -> ID .)


state 55

    (20) method_one -> TRANSL LPAR ID . RPAR

    RPAR            shift and go to state 73


state 56

    (21) method_one -> READ LPAR STRING . RPAR

    RPAR            shift and go to state 74


state 57

    (22) method_two -> SEQ LPAR STRING . COMMA DTYPE RPAR
    (23) method_two -> SEQ LPAR STRING . COMMA RTYPE RPAR

    COMMA           shift and go to state 75


state 58

    (24) method_three -> DRAW LPAR INT . COMMA ID COMMA STRING RPAR

    COMMA           shift and go to state 76


state 59

    (25) method_three -> WRITE LPAR FFORMAT . COMMA ID COMMA STRING RPAR

    COMMA           shift and go to state 77


state 60

    (26) method_three -> WRITE LPAR TFORMAT . COMMA ID COMMA STRING RPAR

    COMMA           shift and go to state 78


state 61

    (9) method_one -> PRINT LPAR ID RPAR .

    $end            reduce using rule 9 (method_one -> PRINT LPAR ID RPAR .)


state 62

    (10) method_one -> COMP LPAR ID RPAR .

    $end            reduce using rule 10 (method_one -> COMP LPAR ID RPAR .)


state 63

    (11) method_one -> RCOMP LPAR ID RPAR .

    $end            reduce using rule 11 (method_one -> RCOMP LPAR ID RPAR .)


state 64

    (12) method_one -> TRANSC LPAR ID RPAR .

    $end            reduce using rule 12 (method_one -> TRANSC LPAR ID RPAR .)


state 65

    (13) method_one -> RTRANSC LPAR ID RPAR .

    $end            reduce using rule 13 (method_one -> RTRANSC LPAR ID RPAR .)


state 66

    (14) method_one -> CTABLE LPAR INT RPAR .

    $end            reduce using rule 14 (method_one -> CTABLE LPAR INT RPAR .)


state 67

    (15) method_one -> COUNT LPAR ID RPAR .

    $end            reduce using rule 15 (method_one -> COUNT LPAR ID RPAR .)


state 68

    (16) method_one -> CONSEN LPAR ID RPAR .

    $end            reduce using rule 16 (method_one -> CONSEN LPAR ID RPAR .)


state 69

    (17) method_one -> ACONSEN LPAR ID RPAR .

    $end            reduce using rule 17 (method_one -> ACONSEN LPAR ID RPAR .)


state 70

    (18) method_one -> DCONSEN LPAR ID RPAR .

    $end            reduce using rule 18 (method_one -> DCONSEN LPAR ID RPAR .)


state 71

    (19) method_one -> CMOTIF LPAR list RPAR .

    $end            reduce using rule 19 (method_one -> CMOTIF LPAR list RPAR .)


state 72

    (27) list -> list COMMA . list
    (27) list -> . list COMMA list
    (28) list -> . ID

    ID              shift and go to state 54

    list                           shift and go to state 79

state 73

    (20) method_one -> TRANSL LPAR ID RPAR .

    $end            reduce using rule 20 (method_one -> TRANSL LPAR ID RPAR .)


state 74

    (21) method_one -> READ LPAR STRING RPAR .

    $end            reduce using rule 21 (method_one -> READ LPAR STRING RPAR .)


state 75

    (22) method_two -> SEQ LPAR STRING COMMA . DTYPE RPAR
    (23) method_two -> SEQ LPAR STRING COMMA . RTYPE RPAR

    DTYPE           shift and go to state 80
    RTYPE           shift and go to state 81


state 76

    (24) method_three -> DRAW LPAR INT COMMA . ID COMMA STRING RPAR

    ID              shift and go to state 82


state 77

    (25) method_three -> WRITE LPAR FFORMAT COMMA . ID COMMA STRING RPAR

    ID              shift and go to state 83


state 78

    (26) method_three -> WRITE LPAR TFORMAT COMMA . ID COMMA STRING RPAR

    ID              shift and go to state 84


state 79

    (27) list -> list COMMA list .
    (27) list -> list . COMMA list

  ! shift/reduce conflict for COMMA resolved as shift
    RPAR            reduce using rule 27 (list -> list COMMA list .)
    COMMA           shift and go to state 72

  ! COMMA           [ reduce using rule 27 (list -> list COMMA list .) ]


state 80

    (22) method_two -> SEQ LPAR STRING COMMA DTYPE . RPAR

    RPAR            shift and go to state 85


state 81

    (23) method_two -> SEQ LPAR STRING COMMA RTYPE . RPAR

    RPAR            shift and go to state 86


state 82

    (24) method_three -> DRAW LPAR INT COMMA ID . COMMA STRING RPAR

    COMMA           shift and go to state 87


state 83

    (25) method_three -> WRITE LPAR FFORMAT COMMA ID . COMMA STRING RPAR

    COMMA           shift and go to state 88


state 84

    (26) method_three -> WRITE LPAR TFORMAT COMMA ID . COMMA STRING RPAR

    COMMA           shift and go to state 89


state 85

    (22) method_two -> SEQ LPAR STRING COMMA DTYPE RPAR .

    $end            reduce using rule 22 (method_two -> SEQ LPAR STRING COMMA DTYPE RPAR .)


state 86

    (23) method_two -> SEQ LPAR STRING COMMA RTYPE RPAR .

    $end            reduce using rule 23 (method_two -> SEQ LPAR STRING COMMA RTYPE RPAR .)


state 87

    (24) method_three -> DRAW LPAR INT COMMA ID COMMA . STRING RPAR

    STRING          shift and go to state 90


state 88

    (25) method_three -> WRITE LPAR FFORMAT COMMA ID COMMA . STRING RPAR

    STRING          shift and go to state 91


state 89

    (26) method_three -> WRITE LPAR TFORMAT COMMA ID COMMA . STRING RPAR

    STRING          shift and go to state 92


state 90

    (24) method_three -> DRAW LPAR INT COMMA ID COMMA STRING . RPAR

    RPAR            shift and go to state 93


state 91

    (25) method_three -> WRITE LPAR FFORMAT COMMA ID COMMA STRING . RPAR

    RPAR            shift and go to state 94


state 92

    (26) method_three -> WRITE LPAR TFORMAT COMMA ID COMMA STRING . RPAR

    RPAR            shift and go to state 95


state 93

    (24) method_three -> DRAW LPAR INT COMMA ID COMMA STRING RPAR .

    $end            reduce using rule 24 (method_three -> DRAW LPAR INT COMMA ID COMMA STRING RPAR .)


state 94

    (25) method_three -> WRITE LPAR FFORMAT COMMA ID COMMA STRING RPAR .

    $end            reduce using rule 25 (method_three -> WRITE LPAR FFORMAT COMMA ID COMMA STRING RPAR .)


state 95

    (26) method_three -> WRITE LPAR TFORMAT COMMA ID COMMA STRING RPAR .

    $end            reduce using rule 26 (method_three -> WRITE LPAR TFORMAT COMMA ID COMMA STRING RPAR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 79 resolved as shift
